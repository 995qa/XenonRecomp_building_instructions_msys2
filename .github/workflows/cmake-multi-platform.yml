name: CMake on multiple platforms

on:
  push:
  pull_request:
  workflow_dispatch:


jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [clang, clang-cl]
        include:
          - os: windows-latest
            c_compiler: clang-cl
            cpp_compiler: clang-cl
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: ubuntu-latest
            c_compiler: clang-cl

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive  # Ensure submodules are cloned

    - name: Set up Clang-Cl on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        echo "Setting up Clang-Cl..."
        echo "CC=clang-cl" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "CXX=clang-cl" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "Using Clang Version:"
        clang-cl --version

    - name: Install Ninja on Windows
      if: runner.os == 'Windows'
      run: |
        choco install ninja --no-progress
      shell: pwsh

    - name: Configure CMake
      run: >
        cmake -B ${{ github.workspace }}/build
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -G Ninja
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run: ctest --build-config ${{ matrix.build_type }}
